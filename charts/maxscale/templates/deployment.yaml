apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: maxscale
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: maxscale
  template:
    metadata:
      labels:
        app.kubernetes.io/component: maxscale
    spec:
      initContainers:
        - name: wait-for-mariadb
          image: {{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}
          env:
            {{- if index (index .Values.global "mariadb-galera") "enabled" }}
            - name: SERVER
              value: {{ include "generate_mariadb_string" (dict "replicaCount" (index (index .Values.global "mariadb-galera") "replicaCount") "releaseName" .Release.Name) }}
            {{- else }}
            - name: SERVER
              value: {{ include "generate_external_mariadb_string" (dict "server" .Values.maxscaleConfig.server) }}
            {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              MYSQL_USER="grafana"
              MYSQL_PASSWORD="juniper@123"

              # Split MySQL servers into an array
              IFS=',' read -ra SERVERS <<< "$SERVER"

              # Set a flag to track successful logins
              LOGGED_IN=false

              # Continue looping until successfully logged in to all servers
              while [ "$LOGGED_IN" == false ]; do

                  # Loop through each MySQL server
                  for SERVER in "${SERVERS[@]}"; do
                      # Extract server details
                      IFS=':' read -ra SERVER_DETAILS <<< "$SERVER"
                      SERVER_NAME="${SERVER_DETAILS[0]}"
                      SERVER_HOST="${SERVER_DETAILS[1]//\/\/}"
                      SERVER_PORT="${SERVER_DETAILS[2]}"

                      # Try to connect to MySQL server
                      mysql -h "$SERVER_HOST" -P "$SERVER_PORT" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SHOW DATABASES;"

                      # Check the exit status of the mysql command
                      if [ $? -eq 0 ]; then
                          echo "Successfully logged in to $SERVER_NAME."
                          LOGGED_IN=true
                          break
                      else
                          echo "Failed to log in to $SERVER_NAME"
                      fi
                  done

                  sleep 10
              done

              echo "Successfully logged in to MySQL servers."

      containers:
        - name: maxscale
          image: {{ include "maxscale.image" . }}
          env:
            {{- if index (index .Values.global "mariadb-galera") "enabled" }}
            - name: SERVER
              value: {{ include "generate_mariadb_string" (dict "replicaCount" (index (index .Values.global "mariadb-galera") "replicaCount") "releaseName" .Release.Name) }}
            {{- else }}
            - name: SERVER
              value: {{ include "generate_external_mariadb_string" (dict "server" .Values.maxscaleConfig.server) }}
            {{- end }}
            - name: MONITOR_USER
              value: {{ .Values.maxscaleConfig.monitor_user }}
            - name: MONITOR_PASSWORD
              value: {{ .Values.maxscaleConfig.monitor_user_password }}
          ports:
          - containerPort: {{ .Values.maxscaleConfig.port }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - maxscale
            topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb
spec:
  selector:
    app.kubernetes.io/component: maxscale
  ports:
    - protocol: TCP
      port: 3306
      targetPort: {{ .Values.maxscaleConfig.port }}
  {{- if .Values.service.externalIPs }}
  externalIPs: {{- toYaml .Values.service.externalIPs | nindent 4 }}
  {{- end }}
  type: ClusterIP
